import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import cifar10

# Load data
(x_train, _), (x_test, _) = cifar10.load_data()
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Convert RGB to grayscale (target)
def rgb2gray(images):
    return np.dot(images[...,:3], [0.2989, 0.5870, 0.1140])[..., np.newaxis]

y_train = rgb2gray(x_train)
y_test = rgb2gray(x_test)

# Model: RGB to grayscale
model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(32, 32, 3)),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', padding='same'),
    tf.keras.layers.Conv2D(1, (3,3), activation='sigmoid', padding='same')
])

model.compile(optimizer='adam', loss='mse')
model.summary()

# Train model
model.fit(x_train, y_train, epochs=5, batch_size=64, validation_data=(x_test, y_test))

# Predict grayscale
pred_gray = model.predict(x_test[:5])

# Show results
for i in range(5):
    plt.figure(figsize=(10,3))
    plt.subplot(1,3,1)
    plt.imshow(x_test[i])
    plt.title("Original RGB")
    plt.axis('off')

    plt.subplot(1,3,2)
    plt.imshow(y_test[i].squeeze(), cmap='gray')
    plt.title("Traditional Grayscale")
    plt.axis('off')

    plt.subplot(1,3,3)
    plt.imshow(pred_gray[i].squeeze(), cmap='gray')
    plt.title("Model Output")
    plt.axis('off')

    plt.show()
